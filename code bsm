import numpy as np
import pandas as pd
import yfinance as yf
from scipy.stats import norm

# NumPy and Pandas are used for Mathematical functions and data analysis. 
# Scipy.stats will be used for the necessary cumulative distribution function of the normal distribution.
# yfinance is used for the financial data we need, if required later.

# Now, we go on defining the BSM call and put option values:
def black_scholes_call(S, K, T, r, sigma):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    call_price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    return call_price

def black_scholes_put(S, K, T, r, sigma):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    put_price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)
    return put_price

# Load the Nifty50 data for the past 1 year using the yfinance library
nifty50 = yf.Ticker("^NSEI")
nifty50_data = nifty50.history(period="1y")

# Assign arbitrary values for the risk-free interest rate and volatility (sigma)
r = 0.08
sigma = 0.20

# Define options data as a dictionary and convert it to a Pandas DataFrame
options_data = {
    'Strike': [23500, 22450, 25000],
    'Expiry': ['2024-08-14', '2024-08-22', '2024-08-29'],
    'Type': ['call', 'put', 'call'],
    'Market_Price': [885, 9, 75]
}

options_df = pd.DataFrame(options_data)

# Convert 'Expiry' to datetime format and compute time to expiration (T)
options_df['Expiry'] = pd.to_datetime(options_df['Expiry'])
options_df['T'] = (options_df['Expiry'] - pd.Timestamp.now()).dt.days / 365

# Get the current spot price of Nifty50
S = nifty50_data['Close'][-1]

# Calculate BSM prices for the options using the defined functions
options_df['BSM_Price'] = options_df.apply(
    lambda row: black_scholes_call(S, row['Strike'], row['T'], r, sigma)
    if row['Type'] == 'call'
    else black_scholes_put(S, row['Strike'], row['T'], r, sigma),
    axis=1
)

# Compute the error between the market price and the BSM price
options_df['Error'] = options_df['Market_Price'] - options_df['BSM_Price']
options_df['Error_Percentage'] = (options_df['Error'] / options_df['Market_Price']) * 100

# Print the DataFrame with the results
print(options_df)

